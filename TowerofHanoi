package com.backtracking;
/*
Complexity:
Time complexity: O(2^N), As each function call calls itself two times by decreasing N just by 1.
Auxiliary Space: O(N), As at a given time we will have atmost N function calls in the stack.
*/
public class TowerofHanoi {
	public static void main(String[] args) {
		int n = 4, from = 1, aux = 2, to = 3;
		System.out.println(towerOfHanoi(n, from, aux, to));
	}

	public static int towerOfHanoi(int n, int from, int aux, int to) {
		int count = 0;
		if (n == 1) {
			System.out.println(" " + from + " " + to);
			return 1;
		}

		count = count + towerOfHanoi(n - 1, from, to, aux);
		count = count + towerOfHanoi(1, from, aux, to);
		count = count + towerOfHanoi(n - 1, aux, from, to);

		return count;
	}

}
