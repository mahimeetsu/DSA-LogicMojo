package com.tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class TreeNode1 {
	int val;
	TreeNode1 left;
	TreeNode1 right;

	TreeNode1() {
	}

	TreeNode1(int val) {
		this.val = val;
	}

	TreeNode1(int val, TreeNode1 left, TreeNode1 right) {
		this.val = val;
		this.left = left;
		this.right = right;
	}
}

/*
 * 			10
 * 
 * 		11			 9
 * 
 * 7 			15 			8
 * 
 * insert 12
 * 
 *  			10
 * 
 * 		11				 9
 * 
 * 7 		 12		15 			8
 * 
 * 
 * Approach:
 * 
 * keep traverse all levels using queue, if we find a node whose left child is
 * empty, then we make a new key as the left child of the node.Else, if we find
 * a node whose right child is empty, the make the new key as the right child of
 * the node. we keep traversing tree until we find a node whose left or right
 * child is empty.
 */

public class InsertionlevelOrderTree {
	public static void main(String[] args) {
		TreeNode1 root = new TreeNode1(10);
		TreeNode1 node1 = new TreeNode1(11);
		TreeNode1 node2 = new TreeNode1(9);
		root.left = node1;
		root.right = node2;
		TreeNode1 node3 = new TreeNode1(7);
		node1.left = node3;
		TreeNode1 node4 = new TreeNode1(15);
		TreeNode1 node5 = new TreeNode1(8);
		node2.left = node4;
		node2.right = node5;
		System.out.println(levelOrderTraversal(root));
		// insert new node 12
		TreeNode1 newNode = new TreeNode1(12);
		insertNewNode(root, newNode);
		System.out.println(levelOrderTraversal(root));
	}

	public static List<List<Integer>> levelOrderTraversal(TreeNode1 root) {
		List<List<Integer>> ansList = new ArrayList<>();
		Queue<TreeNode1> queue = new LinkedList<TreeNode1>();
		queue.add(root);
		while (!queue.isEmpty()) {
			List<Integer> currRow = new ArrayList<Integer>();
			int size = queue.size();

			for (int i = 0; i < size; i++) {
				TreeNode1 node = queue.poll();
				currRow.add(node.val);
				if (node.left != null) {
					queue.add(node.left);
				}
				if (node.right != null) {
					queue.add(node.right);
				}
			}
			ansList.add(currRow);
		}
		return ansList;
	}

	public static void insertNewNode(TreeNode1 root, TreeNode1 newNode) {
		Queue<TreeNode1> queue = new LinkedList<TreeNode1>();
		queue.add(root);
		while (!queue.isEmpty()) {
			List<Integer> currRow = new ArrayList<Integer>();
			int size = queue.size();

			TreeNode1 node = queue.poll();
			currRow.add(node.val);
			if (node.left != null) {
				queue.add(node.left);
			} else {
				node.left = newNode;
				break;
			}
			if (node.right != null) {
				queue.add(node.right);
			} else {
				node.right = newNode;
				break;
			}
		}
	}
}
