Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity if neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.
===============================================

class Solution {
    public int myAtoi(String s) {
        if(s==null||s.length()==0)
            return 0;
        int i=0;
        int n=s.length();
        //step-1:skip spaces
        while(i<n&&s.charAt(i)==' ')
        {
            i++;
        }
        //check if we have reached end
        if(i==n)
            return 0;
        //step-2:check for sign
        int sign=1;
        if(s.charAt(i)=='+')
        {
            i++;
        }
        else if(s.charAt(i)=='-')
        {
            sign=-1;
            i++;
        }
        //step-3:read digits and convert
        long res=0;
        while(i<n&&Character.isDigit(s.charAt(i)))
        {
            int digit=s.charAt(i)-'0';
            res=res*10+digit;

            if(sign*res<=Integer.MIN_VALUE)
            {
                return Integer.MIN_VALUE;
            }
            if(sign*res>=Integer.MAX_VALUE)
            {
                return Integer.MAX_VALUE;
            }
            i++;
        }
        //step-4:apply sign and return
        return (int)(res*sign);
    }

}
