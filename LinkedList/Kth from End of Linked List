Q)You are given the head of a linked list and the number k, You have to return the kth node from the end of linkedList. 
   If k is more than the number of nodes, then the return -1.
Examples
Input: LinkedList: 1->2->3->4->5->6->7->8->9, k = 2
Output: 8
Explanation: The given linked list is 1->2->3->4->5->6->7->8->9. The 2nd node from end is 8.

Input: LinkedList: 10->5->100->5, k = 5
Output: -1
Explanation: The given linked list is 10->5->100->5. Since 'k' is more than the number of nodes, the output is -1.

===================================================================================================================================
Solution:1

/* Structure of node
class Node
{
    int data;
    Node next;
    Node(int d) {data = d; next = null; }
} */

class Solution {

    // Function to find the data of kth node from
    // the end of a linked list.
    int getKthFromLast(Node head, int k) {
        Node temp=head;
        int c=0;
        while(temp!=null)
        {
            c++;
            temp=temp.next;
        }
        if(k>c) return -1;
        temp=head;
        for(int i=0;i<c-k;i++)
        {
            temp=temp.next;
        }
        
        return temp.data;
    }
}


=========================================================================================================================

Solution 2: (Single pass)

/* Structure of node
class Node
{
    int data;
    Node next;
    Node(int d) {data = d; next = null; }
} */

class Solution {

    // Function to find the data of kth node from
    // the end of a linked list.
    int getKthFromLast(Node head, int k) {
        Node slow=head;
        Node fast=head;
        for(int i=1;i<k;i++)
        {
            fast=fast.next;
            
            //if fast reaches null, then k>length of LL,return -1
            if(fast==null)
            return -1;
        }
        
        while(fast.next!=null)
        {
            fast=fast.next;
            slow=slow.next;
        }
        return slow.data;
    }
}
