/*
class Node {
    int data;
    Node next;
    Node prev;

    Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}
*/
class Solution {
    public Node reverse(Node head) {
        Stack<Integer> st=new Stack<>();
        
        Node temp=head;
        
        while(temp!=null)
        {
            st.push(temp.data);
            temp=temp.next;
        }
        
        temp=head;
        
        while(temp!=null)
        {
            temp.data=st.pop();
            temp=temp.next;
        }
        
        return head;
    }
}


===============


class Solution {
    public Node reverse(Node head) {
        if(head==null||head.next==null)
            return head;
        Node prevNode=null;
        Node current=head;
                // Traverse the list and reverse the links
        while(current!=null)
        {
            // Swap the next and prev pointers
            prevNode=current.prev;
            current.prev=current.next;
            current.next=prevNode;
            // Move to the next node in the original list
            // (which is now previous due to reversal)
            current = current.prev;
        }
        head = prevNode.prev;

        return head;
    }
}
