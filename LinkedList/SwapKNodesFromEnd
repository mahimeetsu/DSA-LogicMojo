Given a head of a singly linked list, swap kth node from beginning with kth node from end.
Example: 
Input: head = 5 -> 10 -> 8 -> 5 -> 9 -> 3, k = 2
Output: 5 -> 9 -> 8 -> 5 -> 10 -> 3 
=========================================================================
/*
class Node {
    int data;
    Node next;

    Node(int x) {
        data = x;
        next = null;
    }
}
*/
class Solution {
    public Node swapKth(Node head, int k) {
        if(head==null)
            return head;
        //count length
        Node temp=head;
        int len=0;
        while(temp!=null)
        {
            temp=temp.next;
            len++;
        }
        
        //if k is more than length,then no swap
        if(k>len)
        return head;
        
        //find kth node from start and its prev
        Node prevX=null;
        Node x=head;
       for(int i=1;i<k;i++)
       {
           prevX=x;
           x=x.next;
       }
       //find kth node from last and its prev
       Node prevY=null;
       Node y=head;
       for(int i=1;i<len-k+1;i++)
       {
           prevY=y;
           y=y.next;
       }
       //adjust previous pointer
       if(prevX!=null)
        prevX.next=y;
        if(prevY!=null)
        prevY.next=x;
        //swap next pointers
        Node t=x.next;
        x.next=y.next;
        y.next=t;
        
        //change head if needed
        if(k==1)
            head=y;
        if(k==len)
            head=x;
        
        return head;
    }
}


=======
O(N)  O(1)
