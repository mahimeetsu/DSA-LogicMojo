TIP:

Every Linked List Problem, if you can't do it in LinkedList format,
copy the data in list and now your question would become for an 
array, solve it.

=======Using ArrayList(Store LL elements in list and check for pallindrom)==============
public boolean isPalindrome(ListNode head) {

        if(head==null||head.next==null)
            return true;
        List<Integer> list=new ArrayList<>();
        ListNode temp=head;

        while(temp!=null)
        {
            list.add(temp.val);
            temp=temp.next;
        }

        int start=0;
        int end=list.size()-1;
        // 1    2   2   1
        while(start<end)
        {
            if(list.get(start)!=list.get(end))
                return false;
                start++;
                end--;
        }

        return true;
    }
	
Time complexity: O(N)
Space complexity: O(N)


=============Using Stack==============

    public boolean isPalindrome(ListNode head) {

        if(head==null||head.next==null)
            return true;
        Stack<Integer> st=new Stack<>();
        ListNode temp=head;

        while(temp!=null)
        {
            st.push(temp.val);
            temp=temp.next;
        }

        temp=head;
       
        while(temp!=null)
        {
            if(temp.val!=st.pop())
                return false;
            temp=temp.next;
        }
        return true;
    }
	
	
===========Reverse 2nd half and compare first hanf with 2nd half=============

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {

        if(head==null||head.next==null)
            return true;
        ListNode slow=head;
        ListNode fast=head.next;

        while(fast!=null&&fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }

        ListNode reverse=reverse2ndHalf(slow.next);
        slow.next=null;

        while(reverse!=null)
        {
            if(head.val!=reverse.val)
            return false;
            head=head.next;
            reverse=reverse.next;
        }
        return true;
    }
    public ListNode reverse2ndHalf(ListNode head)
    {
        if(head==null)
        {
            return head;
        }
        ListNode prev=null;
        ListNode temp=head;

        while(temp!=null)
        {
            ListNode frontNode=temp.next;
            temp.next=prev;
            prev=temp;
            temp=frontNode;
        }
                System.out.println("prev===="+prev.val);

        return prev;
    }
}

