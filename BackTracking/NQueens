package com.backtracking;

import java.util.ArrayList;
import java.util.List;

public class NQueens {
	public static void main(String[] args) {
		int n = 4;
		//solution-1
		//Time Complexity: Exponential in nature since we are trying out all ways, to be precise its O(N! * N).
		//Space Complexity: O( N2 )
		List<List<String>> ansQueen = solveNQueens(n);
		for (List<String> list : ansQueen) {
			for (String st : list) {
				System.out.println(st);
			}
			System.out.println();
		}
		//solution-2
		//This is the optimization of the issafe function. In the previous issafe function,
		//we need o(N) for a row, o(N) for the column, and o(N) for the diagonal. Here, we will use hashing to maintain a list to check 
		//whether that position can be the right one or not.
		
	}

	public static List<List<String>> solveNQueens(int n) {
		char board[][] = new char[n][n];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				board[i][j] = '.';
			}
		}

		List<List<String>> res = new ArrayList<>();
		// start with 0th column(1st argument)
		dfs(0, board, res);
		return res;
	}

	public static void dfs(int col, char board[][], List<List<String>> res) {
		if (col == board.length) {
			res.add(construct(board));
			return;
		}
		for (int row = 0; row < board.length; row++) {
			if (isSafe(board, row, col)) {
				board[row][col] = 'Q';
				dfs(col + 1, board, res);
				board[row][col] = '.';
			}
		}
	}

	public static boolean isSafe(char board[][], int row, int col) {
		int duprow = row;
		int dupcol = col;

		// check upper diaganal
		while (row >= 0 && col >= 0) {
			if (board[row][col] == 'Q')
				return false;
			row--;
			col--;
		}

		row = duprow;
		col = dupcol;

		// check left side
		while (col >= 0) {
			if (board[row][col] == 'Q')
				return false;
			col--;
		}

		row = duprow;
		col = dupcol;
		// check lower diaganal
		while (col >= 0 && row < board.length) {

			if (board[row][col] == 'Q')
				return false;
			row++;
			col--;
		}
		return true;
	}

	public static List<String> construct(char board[][]) {
		List<String> res = new ArrayList<>();

		for (int i = 0; i < board.length; i++) {
			String s = new String(board[i]);
			res.add(s);
		}
		return res;
	}
}
