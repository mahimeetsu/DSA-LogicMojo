Implement a Queue using 2 stacks s1 and s2.
A Query q is of 2 Types
(i) 1 x (a query of this type means  pushing 'x' into the queue)
(ii) 2   (a query of this type means to pop an element from the queue and print the popped element)

Note: If there is no element return -1 as the answer while popping.

Examples:

Input: queries = [[1, 2],[1, 3],[2],[1, 4],[2]]
Output: 2 3
Explanation: 
1 2 the queue will be {2}
1 3 the queue will be {2 3}
2   poped element will be 2 the queue will be {3}
1 4 the queue will be {3 4}
2   poped element will be 3.
Input: queries = [[1, 2],[2],[2],[1, 4]]
Output: 2 -1
Explanation: 
1 2 the queue will be {2}
2   poped element will be 2 and 
    then the queue will be empty
2   the queue is empty and hence -1
1 4 the queue will be {4}.


==========
class StackQueue {
    Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();

    // Function to push an element in queue by using 2 stacks.
    void Push(int x) {
        
        while(!s1.isEmpty())
        {
            s2.push(s1.pop());
        }
        
        s1.push(x);
        
        while(!s2.isEmpty())
        {
            s1.push(s2.pop());
        }
    }

    // Function to pop an element from queue by using 2 stacks.
    int Pop() {
        if(s1.isEmpty())
        {
            return -1;
        }
        
        return s1.pop();
    
    }
}


Time Complexity:

push(x) : O(n) - Move all elements from s1 to s2, push the new element, then move back. Linear in the number of elements n.
pop() : O(1) - Just pop the top element from s1.

Space Complexity: O(n) - All elements are stored in the two stacks s1 and s2. No extra space beyond that is needed.

------------

