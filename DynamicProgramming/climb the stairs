You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

===========
TC:o(2^n) and TLE

class Solution {
    public int climbStairs(int n) {
        if(n<=1)
            return 1;
        return climbStairs(n-1)+climbStairs(n-2);
    }
}

==========
TC:o(n)

class Solution {
    public int climbStairs(int n) {
       
        int mem[]=new int[n+1];
        Arrays.fill(mem,-1);
        return helper(n,mem);
    }

    public int helper(int n,int mem[])
    {
        if(n<=1)
            return 1;
        if(mem[n]!=-1)
            return mem[n];
        mem[n]=helper(n-1,mem)+helper(n-2,mem);
        return mem[n];
    }
}



==============
class Solution {
    public int climbStairs(int n) {
       if(n==0||n==1)
        return 1;
       int prev1=1;
       int prev2=2;
        for(int i=3;i<=n;i++)
        {
           int newVal=prev1+prev2;
           prev1=prev2;
           prev2=newVal;
        }
        return prev2;
    }

}




